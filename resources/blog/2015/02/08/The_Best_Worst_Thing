A list of technologies to learn:
1. Clojure's core.async and core.logic
2. React/Om--this is obviously the hip new thing on HN, although LNKD is committed to Ember.
3. Gradle (our build system at LNKD, but only marginally applicable to tech I actually want to use.)
4. Hadoop API
5. Spark/Scala--I'm excited to see this get more traction. I can't wait for the day when I can be perfectly confident in being a data scientist that refuses to touch Java.
6. Java (still dragging my feet here)
7. OOD/Design Patterns--I imagine that there are some good principles laying around
8. Software Architecture in general
0. Algorithms
0. Machine Learning Algorithms. I know we covered Graphical Models in grad school, but it went over my head then and still goes over my head now.
9. Javascript--Most of me isn't convinced Clojure(script) will win, and JS is *right now* winning.
10. Julia--I've had a pretty bad experience trying to learn it, but I see some promise... I'll stick to Python for now, which I now think is pretty reasonable even coming off a real FP. Clearly, I wasn't ever using Python to its full capabilities, which leads me to:
0. Python data ecosystem (Pandas, NumPy, etc., along with all of the functional stuff I was totally oblivious to learning it the first time)
11. DevOps (What is DevOps? Something about whales?)
12. Markdown (which I'm using now, but barely)

I thought my list was going to be overwhelming, but it doesn't look to bad... only a dozen things or so. I doubt I'll ever really be able to get the ML stuff off my plate, even if I find my way to a pretty abstract role, and as long as I'm at LinkedIn, I'm tied down to a pretty conservative version of the stack. Besides ML, the real interesting stuff is happening on the front-end, it'd be great to be there if I thought that it was a good complement to my skills, but it really isn't. I have no desire to either 1. follow the directions of the designers or 2. design myself. This blog is a testament to the fact that I'm far more interested in backend than front end. I still haven't changed to my new shade of blue, which should help a little; this current shade is too depressing and really drab. If I truly had a design focus, I'd be taking notes while surfing the web, and that's just not me. On the other hand, I have been looking more and more into architecture lately, (like buildings) and while there is a ton of fluff to work around, I'm starting to uncover some really wonderful frameworks that at least some architects adhere to these principles to some great effect. It'll be interesting to see that through, and honestly, after fighting the above list for so long, it's a nice break when I get home from work, and don't want to do work here. I don't know why, but core.async and Om have been a huge struggle for me. I imagine the distance between me and the blogs I have read but not understood is that I don't have a CS degree where I was forced to deal with concurrency, and I haven't done any web programming before. If I had to fault the Clojure community with anything, is that's it's pretty hard to pick up Clojure as your first language. I imagine that most Clojurers are Haskell/LISPers from way back or Python people who are navel gazers and want to take it to the next level. Anyway, I want to further work I'm doing on the actual application part of my web app (which is behind a login currently), but there is a big mental block on me knowing that there are some pretty tall hurdles ahead. At least I got the full blog up and I completely own all of the data (unlike blogger), Sandi will be happy.